; ******************************************************
; BASIC .ASM template file for AVR
; ******************************************************

.include "C:\VMLAB\include\M32DEF.INC"

; Define here the variables
;

.DEF  TEMP   = R16  ; temporary working register
.DEF  PNG 	 = R17  ;PING array counter
.DEF	TIME	 = R18  ;Timer TEMP

.DEF  DELAYL = R20  ; 24 bit counter to generate long delays
.DEF  DELAYM = R21  ;
.DEF  DELAYH = R22  ;
.equ	rate	 =	1
; Define here Reset and interrupt vectors, if any
;
reset:

 jmp START ; Reset - start of user code
 jmp EXT_INT0 ; IRQ0 Handler
 jmp EXT_INT1 ; IRQ1 Handler
 jmp EXT_INT2 ; IRQ2 Handler
 jmp TIM2_COMP ;Timer2 Compare Handler
 jmp TIM2_OVF ; Timer2 Overflow Handler
 jmp TIM1_CAPT ; Timer1 Capture Handler
 jmp TIM1_COMPA ; Timer1 CompareA Handler
 jmp TIM1_COMPB;TIM1_COMPB ; Timer1 CompareB Handler
 jmp TIM1_OVF ; Timer1 Overflow Handler
 jmp TIM0_COMP ; Timer0 Compare Handler
 jmp TIM0_OVF ; Timer0 Overflow Handler
 jmp SPI_STC ; SPI Transfer Complete Handler
 jmp USART_RXC ; USART RX Complete Handler
 jmp USART_UDRE ; UDR Empty Handler
 jmp USART_TXC ; USART TX Complete Handler
 jmp ADC ; ADC Conversion Complete
 jmp EE_RDY ; EEPROM Ready Handler
 jmp ANA_COMP ; Analog Comparator Handler
 jmp TWI ; Two-wire Serial Interface
 jmp SPM_RDY ; Store Program Memory Ready
; Program starts here after Reset
;

START:                ;setting stack pointer
	 LDI	 TEMP,	low(RAMEND)
	 OUT	 SPL, TEMP
	 LDI TEMP, high(RAMEND)
	 OUT  SPH, TEMP
	 CLR 	PNG
	 sei	;enable global interupts
	
FOREVER:
	 CLR   R0       ;low - set 00
	 ClR   R1
	 COM	 R1      ;compliment - set FF
	 OUT	 DDRB, R1
	 OUT	 DDRC, R1
	 OUT	 PORTC, R0
	 OUT	 PORTB, R0
	
rjmp ping;

;--------------- PING ------------------------------------------
;
; CONTACT THE PING
;

ping:
rjmp p1;
	
p1:
	LDI	TEMP, 15
	OUT	PORTC, R1    ;send portc high
	OUT	PORTB, R0   ;set LEDS off

p2:
	DEC	TEMP
	CPSE	TEMP, R0
	RJMP 	p2
	
p3:
	OUT	PORTC, R0    ;set portc low
	OUT	DDRC,	 R0    ;set PORTC to input
	
; wait for holdoff period = `750uS	
p4:
	LDI	TEMP, $12   ; ~750us delay (18*42.5uS)
	CALL	SHORT_DELAY
	clr 	TEMP	;reset TEMP $00
;	CALL        ;call timer
	
p5:

	CALL EXT_INT0  ;start timer
	IN	TEMP, PINC          ;read ping
   ORI	TEMP, $7F       ; only look at PC7  PC6-0 = 1
	CPSE	TEMP, R1        ;skip if $FF

	rjmp p5


	
	
p6:
	IN	  TEMP, PINC ;read ping

	ANDI TEMP, $80  ;only look at PC7  PC6-0 = 1
	CPSE TEMP, R0   ;skip if $00
	rjmp	p6

   CALL CALC
	;wait
	LDI TEMP, $20 ;delay ~1s (62*16.2 ms)
	call DELAY;

	rjmp	forever
	
;---------------Calculator - Convert to decimal------------------------------------------
;
;

CALC:
;LDI R17, R18
OUT PORTB, PNG  ;output cm array
CLR PNG
	
;---------------SHORT DELAY ------------------------------------------
;
; PURPOSE: 24 bit counter for long delays.
;
; DETAILS:  L and M loops about  255 * 2 cycles / clock MHz.
;           about 42.5 us @ 12 MHz
;
SHORT_DELAY:
  ;ret                       ; uncomment this line for simulation to
                             ; eliminate very long delays.  Comment out
                             ; to run on real hardware to get 250ms delay.

          ; 42.5 us * whatevers in TEMP
SD_0:
   clr   DELAYM
   dec   DELAYM              ; Start at 0xFF
SD_1:
              ;
   dec   DELAYM              ;
   brne  SD_1                 ; middle loop
   dec   TEMP
   brne  SD_0                 ;outer loop.

   ret

;--------------- DELAY ------------------------------------------
;
; PURPOSE: 24 bit counter for long delays.
;
; DETAILS:  L and M loops about 255 * 255 * 3 cycles / clock MHz.
;           about 16.2 ms @ 12 MHz
;
DELAY:
  ;ret                       ; uncomment this line for simulation to
                             ; eliminate very long delays.  Comment out
                             ; to run on real hardware to get 250ms delay.

     ;16.2ms * whatevers in TEMP
D_0:
   clr   DELAYM
   dec   DELAYM              ; Start at 0xFF
D_1:
   clr   DELAYL
   dec   DELAYL              ; Start at 0xFF
D_2:
   dec   DELAYL              ; inner loop 3 cycles.
   brne  D_2                 ;
   dec   DELAYM              ;
   brne  D_1                 ; middle loop
   dec   TEMP
   brne  D_0                 ;outer loop.

   ret

EXT_INT0: ;counting to 12

 ldi TIME, (1<<CS00)    ;division value by 1 (can change)
 out TCCR0, TIME ; Timer clock = system clock / 1

 ldi TIME, 1<<OCF0
 out TIFR, TIME ; Clear OCF0/ Clear pending interrupts
 ldi TIME, 1<<OCIE0
 out TIMSK, TIME ; Enable Timer/Counter0 Output compare Interrupt
 LDI TIME, $0C  ;appling catch variable for 12
 OUT OCR0, TIME ;setting catch variable

 ret

TIM0_COMP:

CALL EXT_INT2 ;calls second counter
ret

EXT_INT2:  ;counting to 29
	ldi TIME, (1<<CS00)    ;division value by 1 (can change)
	out TCCR2, TIME ; Timer clock = system clock / 1

	ldi TIME, 1<<OCF2
	out TIFR, TIME ; Clear OCF2/ Clear pending interrupts
	ldi TIME, 1<<OCIE2
	out TIMSK, TIME ; Enable Timer/Counter2 Output compare Interrupt
	LDI TIME, $1D  ;appling catch variable for 12
	OUT OCR0, TIME ;setting catch variable

ret

TIM2_COMP:    ;second compare interupt
 in TIME,SREG
 push TIME

 pop TIME
 out SREG,TIME
 pop TIME
 INC PNG;counting times timer overflow is called

ret

; EXT_INT0: reti ; IRQ0 Handler
 EXT_INT1: reti ; IRQ1 Handler
; EXT_INT2: reti ; IRQ2 Handler
 ;TIM2_COMP: reti ;Timer2 Compare Handler
 TIM2_OVF: reti ; Timer2 Overflow Handler
 TIM1_CAPT: reti ; Timer1 Capture Handler
 TIM1_COMPA: reti ; Timer1 CompareA Handler
 TIM1_COMPB: reti ; Timer1 CompareB Handler
 TIM1_OVF: reti ; Timer1 Overflow Handler
; TIM0_COMP: reti ; Timer0 Compare Handler
 TIM0_OVF: reti ; Timer0 Overflow Handler
 SPI_STC: reti ; SPI Transfer Complete Handler
 USART_RXC: reti ; USART RX Complete Handler
 USART_UDRE: reti ; UDR Empty Handler
 USART_TXC: reti ; USART TX Complete Handler
 ADC: reti ; ADC Conversion Complete
 EE_RDY: reti ; EEPROM Ready Handler
 ANA_COMP: reti ; Analog Comparator Handler
 TWI: reti ; Two-wire Serial Interface
 SPM_RDY: reti ; Store Program Memory Ready




